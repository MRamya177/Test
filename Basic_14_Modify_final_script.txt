# Content Generated on 01-10-2025 13:39 India Standard Time using Provider - AzureOpenAI, Model gpt-4

# -------- READING PARAMS BEGIN ----------
import argparse
import json
import psycopg2
import os

def parse_json_file(filename):
    with open(filename, 'r') as f:
        return json.load(f)

def parse_key_value_file(filename):
    config_dict = {}
    with open(filename, 'r') as f:
        for line in f:
            line = line.strip()
            if line and not line.startswith("#"):
                key_value = line.split("=")
                if len(key_value) == 2:
                    key = key_value[0].strip()
                    value = key_value[1].strip()
                    config_dict[key] = value
    return config_dict

parser = argparse.ArgumentParser()
parser.add_argument('--json_config', required=True, help="Path to JSON config file")
parser.add_argument('--params', required=False, help="Path to key-value params file")
args = parser.parse_args()

json_config = parse_json_file(args.json_config)
params = parse_key_value_file(args.params) if args.params else {{}}

for key, value in json_config.items():
        globals()[key] = value

for key, value in params.items():
        globals()[key] = value

# -------- READING PARAMS END ------------




import logging
import time
from datetime import datetime
from dotenv import load_dotenv
load_dotenv('.env')

# Set up logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)
if not os.path.exists(os.getenv('RUNTIME_LOGS')):
    os.makedirs(os.getenv('RUNTIME_LOGS'))
log_file = os.path.join(os.getenv('RUNTIME_LOGS'),"Basic_14_Modify_" + time.strftime("%d%m%Y_%H%M%S") + ".log")
file_handler = logging.FileHandler(log_file)
logger.addHandler(file_handler)

# Start time
start_time = time.time()
logger.info("Job started at " + time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(start_time)))

try:

	from pyspark.sql import SparkSession 
	spark = SparkSession.builder.appName("App").getOrCreate() 
	
	
	### Source Variables ### 
	source_db1 = params["source_db1"]
	source_db_type1 = 'Oracle'
	jdbc_url = json_config[source_db_type1][source_db1][0]["jdbc_url"]
	connection_properties = json_config[source_db_type1][source_db1][0]["connection_properties"]
	df_Oracle_Connector_ORCL_Read_Lnk_ORCL_Src_XFM_Modify_11 = spark.read.format("jdbc").option("url", jdbc_url).option("user", connection_properties["username"]).option("password", connection_properties["password"]).option("query", f"""Select P_ID, P_NAME, P_ADDR  from PERSON""").load()
	
	df_Oracle_Connector_ORCL_Read_Lnk_ORCL_Src_XFM_Modify_11.createOrReplaceTempView("df_Oracle_Connector_ORCL_Read_Lnk_ORCL_Src_XFM_Modify_11 ")
	### STAGE: Modify_11  ###
	### Current df: df_Modify_11_Lnk_XFM_Seq_Data_Set_13
	#PROMPT BEGIN 
	"
	df_Modify_11_Lnk_XFM_Seq_Data_Set_13 = spark.sql(f"""
	    SELECT 
	        CAST(P_ID AS INT) AS P_ID,
	        P_NAME
	    FROM 
	        df_Oracle_Connector_ORCL_Read_Lnk_ORCL_Src_XFM_Modify_11 AS df_Oracle_Connector_ORCL_Read_Lnk_ORCL_Src_XFM_Modify_11
	    WHERE 
	        P_NAME IS NOT NULL
	""")
	df_Modify_11_Lnk_XFM_Seq_Data_Set_13.createOrReplaceTempView("df_Modify_11_Lnk_XFM_Seq_Data_Set_13")
	processed_records_count = df_Modify_11_Lnk_XFM_Seq_Data_Set_13.count()
	logger.info(f"Number of records processed for Modify_11: {processed_records_count}")
	
	#PROMPT END
	df_Modify_11_Lnk_XFM_Seq_Data_Set_13.repartition(1).write.mode(f"{mode}").csv(f"C:\Modify.{ext}", header=True)
	
	# End time
	end_time = time.time()
	elapsed_time = end_time - start_time
	logger.info(f"Job finished at {time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(end_time))}")
	logger.info(f"Elapsed time: {elapsed_time:.2f} seconds")
	spark.stop()

except Exception as e:
	logger.error(f"Job failed with error: {str(e)}")
	raise
    